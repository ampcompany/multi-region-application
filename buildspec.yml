version: 0.2

run-as: root

env:
  shell: bash
  variables:
    NODE_ENV: "test"
    EXPRESS_PORT: 5000
    EXPRESS_DATABASE_USERNAME: test
    EXPRESS_DATABASE_PASSWORD: test
    EXPRESS_DATABASE_DATABASE: test
    EXPRESS_DATABASE_HOST: localhost
    EXPRESS_EATABASE_PORT: 5432

phases:
  install:
    runtime-versions:
      nodejs: 12
    commands:
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - docker pull public.ecr.aws/docker/library/postgres:13.6-alpine
      - docker start -p 5432:5432 -e POSTGRES_USER=test -e POSTGRES_DB=test -e POSTGRES_PASSWORD=test --name postgres public.ecr.aws/docker/library/postgres:13.6-alpine
      - npm install

  pre_build:
    commands:
      - npm test

  build:
    commands:
      - VERSION=$(sed 's/.*"version": "\(.*\)".*/\1/;t;d' ./package.json)
      - docker build . -t $IMAGE_REPO_NAME:$VERSION
      - docker tag $IMAGE_REPO_NAME:$VERSION $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$VERSION
      - docker tag $IMAGE_REPO_NAME:$VERSION $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest

  post_build:
    commands:
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$VERSION
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest

reports:
  multi-region-application-test:
    files:
      - ./junit.xml
    file-format: JUNITXML

  multi-region-application-coverage:
    files:
      - ./coverage/clover.xml
    file-format: CLOVERXML
